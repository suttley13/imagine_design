# Deployment workflow for Cloud Run

name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: designai-454112
  SERVICE_NAME: imagine-design
  REGION: us-central1
  DATABASE_INSTANCE: redesign-ai-db
  DATABASE_NAME: redesign_db

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v1'
      
    - name: Authorize Docker push
      run: gcloud auth configure-docker
      
    - name: Check if Cloud SQL instance exists
      id: check_db
      run: |
        if gcloud sql instances describe $DATABASE_INSTANCE --project=$PROJECT_ID 2>/dev/null; then
          echo "Database instance exists"
          echo "::set-output name=exists::true"
        else
          echo "Database instance does not exist"
          echo "::set-output name=exists::false"
        fi
      continue-on-error: true
      
    - name: Create Cloud SQL instance if it doesn't exist
      if: steps.check_db.outputs.exists != 'true'
      run: |
        echo "Creating new Cloud SQL instance..."
        gcloud sql instances create $DATABASE_INSTANCE \
          --database-version=POSTGRES_13 \
          --cpu=1 \
          --memory=3840MiB \
          --region=$REGION \
          --project=$PROJECT_ID \
          --storage-type=SSD \
          --storage-size=10GB
      
    - name: Create database if it doesn't exist
      run: |
        # Check if database exists
        if ! gcloud sql databases list --instance=$DATABASE_INSTANCE --project=$PROJECT_ID | grep -q $DATABASE_NAME; then
          echo "Creating database $DATABASE_NAME..."
          gcloud sql databases create $DATABASE_NAME --instance=$DATABASE_INSTANCE --project=$PROJECT_ID
        else
          echo "Database $DATABASE_NAME already exists"
        fi
      
    - name: Set Cloud SQL connection name as environment variable
      run: |
        CONNECTION_NAME=$(gcloud sql instances describe $DATABASE_INSTANCE --project=$PROJECT_ID --format='value(connectionName)')
        echo "CONNECTION_NAME=$CONNECTION_NAME" >> $GITHUB_ENV
      
    - name: Build and push Docker image
      run: |
        docker build -t gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }} .
        docker push gcr.io/$PROJECT_ID/$SERVICE_NAME:${{ github.sha }}
      
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v1
      with:
        service: ${{ env.SERVICE_NAME }}
        image: gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
        region: ${{ env.REGION }}
        flags: --allow-unauthenticated --add-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.DATABASE_INSTANCE }}
        env_vars: |
          FLASK_CONFIG=cloud_run
          DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@localhost/${{ env.DATABASE_NAME }}?host=/cloudsql/${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.DATABASE_INSTANCE }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
          GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}
          CLAUDE_API_KEY=${{ secrets.CLAUDE_API_KEY }}
          CLAUDE_MODEL=${{ secrets.CLAUDE_MODEL }}
          INSTANCE_CONNECTION_NAME=${{ env.PROJECT_ID }}:${{ env.REGION }}:${{ env.DATABASE_INSTANCE }}
          DB_NAME=${{ env.DATABASE_NAME }}
          DB_USER=postgres
          DB_PASS=${{ secrets.DB_PASSWORD }}
